#!/bin/bash

# Switch to workdir
cd "${STEAMAPPDIR}" || exit

### Function for gracefully shutdown
function kill_corekeeperserver {
    if [[ -n "$ckpid" ]]; then
        kill $ckpid
        wait $ckpid
    fi
    if [[ -n "$xvfbpid" ]]; then
        kill $xvfbpid
        wait $xvfbpid
    fi
}

trap kill_corekeeperserver EXIT

if [ -f "GameID.txt" ]; then rm GameID.txt; fi

# Compile Parameters
# Populates `params` array with parameters.
# Creates `logfile` var with log file path.
source "${SCRIPTSDIR}/compile-parameters.sh"

# Create the log file and folder.
mkdir -p "${STEAMAPPDIR}/logs"
touch "$logfile"

# Start Xvfb
Xvfb :99 -screen 0 1x1x24 -nolisten tcp &
xvfbpid=$!

# Start Core Keeper Server
DISPLAY=:99 LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${STEAMCMDDIR}/linux64/" ./CoreKeeperServer "${params[@]}" &
ckpid=$!

echo "Started server process with pid ${ckpid}"

tail --pid "$ckpid" -n +1 -f "$logfile" &

until [ -f GameID.txt ]; do
    sleep 0.1
done

gameid=$(<GameID.txt)
if [ -z "$DISCORD_HOOK" ]; then
    echo "Please set DISCORD_WEBHOOK url."
else
    echo "Discord gameid"
    format="${DISCORD_PRINTF_STR:-%s}"
    # curl -i -H "Accept: application/json" -H "Content-Type:application/json" -X POST --data "{\"content\": \"$(printf "${format}" "${gameid}")\"}" "${DISCORD_HOOK}"

    # Monitor server logs for player join/leave, server start, and server stop
    tail -f CoreKeeperServerLog.txt | while read LOGLINE; do
        # Add timestamp to each log line
        echo "$(date '+%Y-%m-%d %H:%M:%S') - $LOGLINE"

        # Detect player join based on log: [userid:12345] is using new name PlayerName
        if echo "$LOGLINE" | grep -q "is using new name"; then
            PLAYER_NAME=$(echo "$LOGLINE" | grep -oP "is using new name \K\w+")
            echo "Player Name: $PLAYER_NAME"           # Debugging: ensure player name is correct
            if [ -n "$DISCORD_MESSAGE_WELCOME" ]; then # Only send if DISCORD_MESSAGE_WELCOME is set
                WELCOME_MSG=$(echo "$DISCORD_MESSAGE_WELCOME" | sed "s/\$\$user/$PLAYER_NAME/g")
                echo "Generated Welcome Message: $WELCOME_MSG" # Debugging: ensure message is correct

                # Check if WELCOME_MSG is empty before sending
                if [ -z "$WELCOME_MSG" ]; then
                    echo "Error: Welcome message is empty"
                else
                    curl -i -H "Accept: application/json" -H "Content-Type: application/json" -X POST --data "{\"content\": \"$(printf "${format}" "${WELCOME_MSG}")\"}" "${DISCORD_HOOK}"
                fi
            else
                echo "DISCORD_MESSAGE_WELCOME not set. Skipping Discord notification."
            fi
        fi

        # Detect potential player leave
        if echo "$LOGLINE" | grep -q "Accepted connection from .* with result OK awaiting authentication"; then
            PLAYER_NAME=$(echo "$LOGLINE" | grep -oP "Connected to userid:.*")
            if [ -n "$DISCORD_MESSAGE_BYE" ]; then # Only send if DISCORD_MESSAGE_BYE is set
                BYE_MSG=$(echo "$DISCORD_MESSAGE_BYE" | sed "s/\$\$user/$PLAYER_NAME/g")
                echo "Generated Bye Message: $BYE_MSG" # Debugging: ensure message is correct

                # Check if BYE_MSG is empty before sending
                if [ -z "$BYE_MSG" ]; then
                    echo "Error: Bye message is empty"
                else
                    curl -i -H "Accept: application/json" -H "Content-Type: application/json" -X POST --data "{\"content\": \"$(printf "${format}" "${BYE_MSG}")\"}" "${DISCORD_HOOK}"
                fi
            else
                echo "DISCORD_MESSAGE_BYE not set. Skipping Discord notification."
            fi
        fi

        # Detect server start message: Started session with Game ID
        if echo "$LOGLINE" | grep -q "Started session with Game ID"; then
            echo "Server start detected"             # Debugging: detect start request
            if [ -n "$DISCORD_MESSAGE_START" ]; then # Only send if DISCORD_MESSAGE_START is set
                START_MSG=$(echo "$DISCORD_MESSAGE_START" | sed "s/\$\$WORLD_NAME/$WORLD_NAME/g" | sed "s/\$\$gameid/$gameid/g")
                echo "Generated Start Message: $START_MSG" # Debugging: ensure start message is correct

                # Check if START_MSG is empty before sending
                if [ -z "$START_MSG" ]; then
                    echo "Error: Start message is empty"
                else
                    curl -i -H "Accept: application/json" -H "Content-Type: application/json" -X POST --data "{\"content\": \"$(printf "${format}" "${START_MSG}")\"}" "${DISCORD_HOOK}"
                fi
            else
                echo "DISCORD_MESSAGE_START not set. Skipping Discord notification."
            fi
        fi

        # Detect server stop message: Got quit request
        if echo "$LOGLINE" | grep -q "Got quit request"; then
            echo "Server stop detected"             # Debugging: detect quit request
            if [ -n "$DISCORD_MESSAGE_STOP" ]; then # Only send if DISCORD_MESSAGE_STOP is set
                STOP_MSG=$(echo "$DISCORD_MESSAGE_STOP" | sed "s/\$\$WORLD_NAME/$WORLD_NAME/g")
                echo "Generated Stop Message: $STOP_MSG" # Debugging: ensure stop message is correct

                # Check if STOP_MSG is empty before sending
                if [ -z "$STOP_MSG" ]; then
                    echo "Error: Stop message is empty"
                else
                    curl -i -H "Accept: application/json" -H "Content-Type: application/json" -X POST --data "{\"content\": \"$(printf "${format}" "${STOP_MSG}")\"}" "${DISCORD_HOOK}"
                fi
            else
                echo "DISCORD_MESSAGE_STOP not set. Skipping Discord notification."
            fi
        fi
    done
fi

wait $ckpid
